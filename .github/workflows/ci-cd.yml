name: CI-CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      input:
        description: "Execute CI/CD"
        required: false
        default: "Execute CI/CD manually"
        
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        pip install --upgrade flask flasgger

    - name: Run tests with coverage
      run: |
        pytest --cov=app --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
        with:
          args: >
            -Dsonar.sources=.
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}

  deploy:
    runs-on: ubuntu-latest
    needs: sonarcloud

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Deploy to EC2
      env:
        SSH_KEY: ${{ secrets.SSH_KEY }}
        EC2_USER: ${{ secrets.EC2_USER }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
        echo "$SSH_KEY" > key.pem
        chmod 600 key.pem
        ssh -i key.pem $EC2_USER@$EC2_HOST "mkdir -p /home/$EC2_USER/my-flask-app"
        scp -i key.pem -r ./* $EC2_USER@$EC2_HOST:/home/$EC2_USER/my-flask-app
        ssh -i key.pem $EC2_USER@$EC2_HOST << 'EOF'
          cd /home/$EC2_USER/my-flask-app
          ./setup.sh
          pip install -r requirements.txt
          nohup python3 app.py > app.log 2>&1 &
          python3 /home/$EC2_USER/my-flask-app/app.py
        EOF
