name: CI-CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      input:
        description: "Execute CI/CD"
        required: false
        default: "Execute CI/CD manually"
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        pip install --upgrade flask flasgger

    - name: Run tests with coverage
      run: |
        pytest --cov=app --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  sonarcloud:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Cache SonarCloud packages
      uses: actions/cache@v2
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: |
          ${{ runner.os }}-sonar

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip
        restore-keys: |
          ${{ runner.os }}-pip

    - name: Install SonarScanner
      run: |
        pip install sonar-scanner

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Run SonarCloud Scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        sonar-scanner \
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
          -Dsonar.sources=. \
          -Dsonar.python.coverage.reportPaths=coverage.xml

  deploy:
    runs-on: ubuntu-latest
    needs: sonarcloud

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Deploy to EC2
      env:
        SSH_KEY: ${{ secrets.SSH_KEY }}
        EC2_USER: ${{ secrets.EC2_USER }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
      run: |
        echo "$SSH_KEY" > key.pem
        chmod 600 key.pem
        scp -i key.pem -r ./* $EC2_USER@$EC2_HOST:/home/$EC2_USER/my-flask-app
        ssh -i key.pem $EC2_USER@$EC2_HOST << 'EOF'
          sudo systemctl stop my-flask-app
          cd /home/$EC2_USER/my-flask-app
          pip install -r requirements.txt
          nohup python app.py > app.log 2>&1 &
          sudo systemctl start my-flask-app
        EOF
